" :bコマンドでbufferを切り替える時に編集中ファイルを保存しなくても良くなる機能です。
set hidden
" 入力モードでTabキー押下時やインデントの際、タブ文字ではなく、半角スペースが挿入されるようになる
" set expandtab
set noexpandtab
" 何個分のスペースで 1 つのタブとしてカウントするかを設定するオプション デフォルト値は8
set tabstop=4
" <Enter> を押して改行した時や, ノーマルモードの <<, >>, インサートモードの CTRL-D, CTRL-T コマンドなどで行をインデントした時, スペース何個分インデントさせるかを設定するオプション
set shiftwidth=4
" オンのときは、ウィンドウの幅より長い行は折り返され、次の行に続けて表示される。（有効:wrap/無効:nowrap）
set nowrap
" 毎行の前に行番号を表示する。（有効:number/無効:nonumber）
set number
" カーソルが何行目の何列目に置かれているかを表示する。（有効:ruler/無効:noruler）
set ruler
" カレント行ハイライトON
set cursorline
" アンダーラインを引く(color terminal)
highlight CursorLine cterm=underline ctermfg=NONE ctermbg=NONE
" アンダーラインを引く(gui)
highlight CursorLine gui=underline guifg=NONE guibg=NONE
" 検索結果ハイライト
set hlsearch
" タブ文字を CTRL-I で表示し、行末に $ で表示する。（有効:list/無効:nolist）
set nolist
" Listモード (訳注: オプション 'list' がオンのとき) に使われる文字を設定する。
set listchars=tab:?-,trail:-,eol:?,extends:?,precedes:?,nbsp:%
" 長い行を折り返して表示(折り返す:wrap/折り返さない:nowrap)
set nowrap
" コマンドラインモードでtabで補完する(本来は Ctrl + d -> Ctrl + l)
set wildmenu
" ステータスラインを常に表示(0:表示しない、1:2つ以上ウィンドウがある時だけ表示)
set laststatus=2

" ls -laのような表示になります
let g:netrw_liststyle=1
" サイズを(K,M,G)で表示
let g:netrw_sizestyle="H"
" 日付フォーマットを yyyy/mm/dd(曜日) hh:mm:ss で表示
let g:netrw_timefmt="%Y/%m/%d(%a) %H:%M:%S"

" ヘッダを非表示にする
let g:netrw_banner=0
" プレビューウィンドウを垂直分割で表示する
let g:netrw_preview=1

:source $HOME/vimfiles/ViewChange.vim
:source $HOME/vimfiles/plugin/jasentence.vim
:source $HOME/vimfiles/plugin/changed.vim

"" ↓Tab設定
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ
"" ↑Tab設定

"「%」でカーソル移動できる新しい組み合わせを追加する
set matchpairs+=<:>

" バックアップファイル出力無効
set nobackup
" undoファイル出力無効
set noundofile

" 文字コード自動判別 列挙された文字コードの順番でファイルを開き、 上手くいった文字コードがファイル表示に採用される
" set encodingで指定した文字コードを含める場合は一番最後に記述します。
" 先頭や途中に含めてしまうと、以降に指定した文字コードは無視されてしまう
set encoding=sjis
set fileencodings=iso-2022-jp,euc-jp,utf-8,cp932,sjis

" 入力補完設定
" ・補完ウィンドウが表示された時に最初の1件目を選択状態にしておきたい
" ・Enterで補完対象を確定したい
" ・選んでいる時はまだ挿入したくない
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
set completeopt=menuone,noinsert
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"

" :vimgrepに加えて:grep、:Ggrepでも自動的にquickfix-windowを開く
autocmd QuickFixCmdPost *grep* cwindow

" エクスプローラ設定↓
" 上部に表示される情報を非表示
let g:netrw_banner = 0
" 表示形式をTreeViewに変更
let g:netrw_liststyle = 3
" 左右分割を右側に開く
let g:netrw_altv = 1
" 分割で開いたときに85%のサイズで開く
let g:netrw_winsize = 85
" エクスプローラ設定↑
